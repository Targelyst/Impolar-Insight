/* eslint-disable */
import * as types from './graphql.js';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query getBoard($id: UUID!) {\n    board(id: $id) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": typeof types.GetBoardDocument,
    "\n  query getBoardByUrl($url: String!) {\n    boardByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": typeof types.GetBoardByUrlDocument,
    "\n  query getBoards($first: Int, $after: String, $displayOnly: Boolean) {\n    boards(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          display\n          viewVoters\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetBoardsDocument,
    "\n  query getChangelogItem($id: UUID!) {\n    changelogItem(id: $id) {\n      id\n      title\n      contentMarkdown\n      isPublished\n      publishedAt\n      relatedPosts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": typeof types.GetChangelogItemDocument,
    "\n  query getChangelogItems($first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItems(first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n          relatedPosts {\n            id\n            title\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetChangelogItemsDocument,
    "\n  query getChangelogItemsByPost($postId: UUID!, $first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItemsByPost(postId: $postId, first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetChangelogItemsByPostDocument,
    "\n  query getComment($id: UUID!) {\n    comment(id: $id) {\n      id\n      body\n      activityId\n      isEdited\n      isInternal\n      isSpam\n      parentId\n      parent {\n        id\n        body\n      }\n    }\n  }\n": typeof types.GetCommentDocument,
    "\n  query getComments($first: Int, $after: String) {\n    comments(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n          parentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetCommentsDocument,
    "\n  query getCommentsByParent($parentId: UUID!, $first: Int, $after: String) {\n    commentsByParent(parentId: $parentId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetCommentsByParentDocument,
    "\n  query getPostActivity($id: UUID!) {\n    postActivity(id: $id) {\n      id\n      type\n      authorId\n      postId\n      commentId\n      comment {\n        id\n        body\n      }\n    }\n  }\n": typeof types.GetPostActivityDocument,
    "\n  query getPostActivities($first: Int, $after: String) {\n    postActivities(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          postId\n          commentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetPostActivitiesDocument,
    "\n  query getPostActivitiesByPost($postId: UUID!, $first: Int, $after: String) {\n    postActivitiesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          commentId\n          comment {\n            id\n            body\n            isInternal\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetPostActivitiesByPostDocument,
    "\n  query getPostActivitiesByAuthor($authorId: UUID!, $first: Int, $after: String) {\n    postActivitiesByAuthor(authorId: $authorId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          postId\n          commentId\n          comment {\n            id\n            body\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetPostActivitiesByAuthorDocument,
    "\n  query getPost($id: UUID!) {\n    post(id: $id) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n": typeof types.GetPostDocument,
    "\n  query getPostBySlug($slug: String!, $slugId: String!) {\n    postBySlug(slug: $slug, slugId: $slugId) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n": typeof types.GetPostBySlugDocument,
    "\n  query getPosts($first: Int, $after: String) {\n    posts(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetPostsDocument,
    "\n  query getPostsByBoard($boardId: UUID!, $first: Int, $after: String) {\n    postsByBoard(boardId: $boardId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetPostsByBoardDocument,
    "\n  query getPostsByRoadmap($roadmapId: UUID!, $first: Int, $after: String) {\n    postsByRoadmap(roadmapId: $roadmapId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetPostsByRoadmapDocument,
    "\n  query getPostsByUser($userId: UUID!, $first: Int, $after: String) {\n    postsByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetPostsByUserDocument,
    "\n  query getRoadmapCollection($id: UUID!) {\n    roadmapCollection(id: $id) {\n      id\n      name\n      description\n      index\n      isPublic\n      roadmaps {\n        id\n        name\n        url\n        color\n        index\n      }\n    }\n  }\n": typeof types.GetRoadmapCollectionDocument,
    "\n  query getRoadmapCollections($first: Int, $after: String) {\n    roadmapCollections(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          index\n          isPublic\n          roadmaps {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetRoadmapCollectionsDocument,
    "\n  query getRoadmap($id: UUID!) {\n    roadmap(id: $id) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": typeof types.GetRoadmapDocument,
    "\n  query getRoadmapByUrl($url: String!) {\n    roadmapByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": typeof types.GetRoadmapByUrlDocument,
    "\n  query getRoadmaps($first: Int, $after: String, $displayOnly: Boolean) {\n    roadmaps(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n          roadmapCollectionId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetRoadmapsDocument,
    "\n  query getRoadmapsByCollection($collectionId: UUID!, $first: Int, $after: String, $displayOnly: Boolean) {\n    roadmapsByCollection(collectionId: $collectionId, first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetRoadmapsByCollectionDocument,
    "\n  query getSiteSettings {\n\tsiteSettings {\n\t\tid\n\t\ttitle\n\t\tdescription\n\t\tlogo\n\t\ticon\n\t\taccentColor\n\t\tgoogleAnalyticsId\n\t\tisPoweredBy\n\t\tallowSignup\n\t\tdeveloperMode\n\t\tlabs\n\t\ttheme\n\t}\n  }\n": typeof types.GetSiteSettingsDocument,
    "\n  query getVote($id: UUID!) {\n    vote(id: $id) {\n      id\n      postId\n      userId\n    }\n  }\n": typeof types.GetVoteDocument,
    "\n  query getVotes($first: Int, $after: String) {\n    votes(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetVotesDocument,
    "\n  query getVotesByPost($postId: UUID!, $first: Int, $after: String) {\n    votesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetVotesByPostDocument,
    "\n  query getVotesByUser($userId: UUID!, $first: Int, $after: String) {\n    votesByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetVotesByUserDocument,
};
const documents: Documents = {
    "\n  query getBoard($id: UUID!) {\n    board(id: $id) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": types.GetBoardDocument,
    "\n  query getBoardByUrl($url: String!) {\n    boardByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": types.GetBoardByUrlDocument,
    "\n  query getBoards($first: Int, $after: String, $displayOnly: Boolean) {\n    boards(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          display\n          viewVoters\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetBoardsDocument,
    "\n  query getChangelogItem($id: UUID!) {\n    changelogItem(id: $id) {\n      id\n      title\n      contentMarkdown\n      isPublished\n      publishedAt\n      relatedPosts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": types.GetChangelogItemDocument,
    "\n  query getChangelogItems($first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItems(first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n          relatedPosts {\n            id\n            title\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetChangelogItemsDocument,
    "\n  query getChangelogItemsByPost($postId: UUID!, $first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItemsByPost(postId: $postId, first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetChangelogItemsByPostDocument,
    "\n  query getComment($id: UUID!) {\n    comment(id: $id) {\n      id\n      body\n      activityId\n      isEdited\n      isInternal\n      isSpam\n      parentId\n      parent {\n        id\n        body\n      }\n    }\n  }\n": types.GetCommentDocument,
    "\n  query getComments($first: Int, $after: String) {\n    comments(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n          parentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetCommentsDocument,
    "\n  query getCommentsByParent($parentId: UUID!, $first: Int, $after: String) {\n    commentsByParent(parentId: $parentId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetCommentsByParentDocument,
    "\n  query getPostActivity($id: UUID!) {\n    postActivity(id: $id) {\n      id\n      type\n      authorId\n      postId\n      commentId\n      comment {\n        id\n        body\n      }\n    }\n  }\n": types.GetPostActivityDocument,
    "\n  query getPostActivities($first: Int, $after: String) {\n    postActivities(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          postId\n          commentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetPostActivitiesDocument,
    "\n  query getPostActivitiesByPost($postId: UUID!, $first: Int, $after: String) {\n    postActivitiesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          commentId\n          comment {\n            id\n            body\n            isInternal\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetPostActivitiesByPostDocument,
    "\n  query getPostActivitiesByAuthor($authorId: UUID!, $first: Int, $after: String) {\n    postActivitiesByAuthor(authorId: $authorId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          postId\n          commentId\n          comment {\n            id\n            body\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetPostActivitiesByAuthorDocument,
    "\n  query getPost($id: UUID!) {\n    post(id: $id) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n": types.GetPostDocument,
    "\n  query getPostBySlug($slug: String!, $slugId: String!) {\n    postBySlug(slug: $slug, slugId: $slugId) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n": types.GetPostBySlugDocument,
    "\n  query getPosts($first: Int, $after: String) {\n    posts(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetPostsDocument,
    "\n  query getPostsByBoard($boardId: UUID!, $first: Int, $after: String) {\n    postsByBoard(boardId: $boardId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetPostsByBoardDocument,
    "\n  query getPostsByRoadmap($roadmapId: UUID!, $first: Int, $after: String) {\n    postsByRoadmap(roadmapId: $roadmapId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetPostsByRoadmapDocument,
    "\n  query getPostsByUser($userId: UUID!, $first: Int, $after: String) {\n    postsByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetPostsByUserDocument,
    "\n  query getRoadmapCollection($id: UUID!) {\n    roadmapCollection(id: $id) {\n      id\n      name\n      description\n      index\n      isPublic\n      roadmaps {\n        id\n        name\n        url\n        color\n        index\n      }\n    }\n  }\n": types.GetRoadmapCollectionDocument,
    "\n  query getRoadmapCollections($first: Int, $after: String) {\n    roadmapCollections(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          index\n          isPublic\n          roadmaps {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetRoadmapCollectionsDocument,
    "\n  query getRoadmap($id: UUID!) {\n    roadmap(id: $id) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": types.GetRoadmapDocument,
    "\n  query getRoadmapByUrl($url: String!) {\n    roadmapByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n": types.GetRoadmapByUrlDocument,
    "\n  query getRoadmaps($first: Int, $after: String, $displayOnly: Boolean) {\n    roadmaps(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n          roadmapCollectionId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetRoadmapsDocument,
    "\n  query getRoadmapsByCollection($collectionId: UUID!, $first: Int, $after: String, $displayOnly: Boolean) {\n    roadmapsByCollection(collectionId: $collectionId, first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetRoadmapsByCollectionDocument,
    "\n  query getSiteSettings {\n\tsiteSettings {\n\t\tid\n\t\ttitle\n\t\tdescription\n\t\tlogo\n\t\ticon\n\t\taccentColor\n\t\tgoogleAnalyticsId\n\t\tisPoweredBy\n\t\tallowSignup\n\t\tdeveloperMode\n\t\tlabs\n\t\ttheme\n\t}\n  }\n": types.GetSiteSettingsDocument,
    "\n  query getVote($id: UUID!) {\n    vote(id: $id) {\n      id\n      postId\n      userId\n    }\n  }\n": types.GetVoteDocument,
    "\n  query getVotes($first: Int, $after: String) {\n    votes(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetVotesDocument,
    "\n  query getVotesByPost($postId: UUID!, $first: Int, $after: String) {\n    votesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetVotesByPostDocument,
    "\n  query getVotesByUser($userId: UUID!, $first: Int, $after: String) {\n    votesByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetVotesByUserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBoard($id: UUID!) {\n    board(id: $id) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBoard($id: UUID!) {\n    board(id: $id) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBoardByUrl($url: String!) {\n    boardByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBoardByUrl($url: String!) {\n    boardByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      display\n      viewVoters\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBoards($first: Int, $after: String, $displayOnly: Boolean) {\n    boards(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          display\n          viewVoters\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getBoards($first: Int, $after: String, $displayOnly: Boolean) {\n    boards(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          display\n          viewVoters\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getChangelogItem($id: UUID!) {\n    changelogItem(id: $id) {\n      id\n      title\n      contentMarkdown\n      isPublished\n      publishedAt\n      relatedPosts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getChangelogItem($id: UUID!) {\n    changelogItem(id: $id) {\n      id\n      title\n      contentMarkdown\n      isPublished\n      publishedAt\n      relatedPosts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getChangelogItems($first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItems(first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n          relatedPosts {\n            id\n            title\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getChangelogItems($first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItems(first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n          relatedPosts {\n            id\n            title\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getChangelogItemsByPost($postId: UUID!, $first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItemsByPost(postId: $postId, first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getChangelogItemsByPost($postId: UUID!, $first: Int, $after: String, $publishedOnly: Boolean) {\n    changelogItemsByPost(postId: $postId, first: $first, after: $after, publishedOnly: $publishedOnly) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          contentMarkdown\n          isPublished\n          publishedAt\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getComment($id: UUID!) {\n    comment(id: $id) {\n      id\n      body\n      activityId\n      isEdited\n      isInternal\n      isSpam\n      parentId\n      parent {\n        id\n        body\n      }\n    }\n  }\n"): (typeof documents)["\n  query getComment($id: UUID!) {\n    comment(id: $id) {\n      id\n      body\n      activityId\n      isEdited\n      isInternal\n      isSpam\n      parentId\n      parent {\n        id\n        body\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getComments($first: Int, $after: String) {\n    comments(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n          parentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getComments($first: Int, $after: String) {\n    comments(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n          parentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCommentsByParent($parentId: UUID!, $first: Int, $after: String) {\n    commentsByParent(parentId: $parentId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getCommentsByParent($parentId: UUID!, $first: Int, $after: String) {\n    commentsByParent(parentId: $parentId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          body\n          activityId\n          isEdited\n          isInternal\n          isSpam\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostActivity($id: UUID!) {\n    postActivity(id: $id) {\n      id\n      type\n      authorId\n      postId\n      commentId\n      comment {\n        id\n        body\n      }\n    }\n  }\n"): (typeof documents)["\n  query getPostActivity($id: UUID!) {\n    postActivity(id: $id) {\n      id\n      type\n      authorId\n      postId\n      commentId\n      comment {\n        id\n        body\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostActivities($first: Int, $after: String) {\n    postActivities(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          postId\n          commentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getPostActivities($first: Int, $after: String) {\n    postActivities(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          postId\n          commentId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostActivitiesByPost($postId: UUID!, $first: Int, $after: String) {\n    postActivitiesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          commentId\n          comment {\n            id\n            body\n            isInternal\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getPostActivitiesByPost($postId: UUID!, $first: Int, $after: String) {\n    postActivitiesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          authorId\n          commentId\n          comment {\n            id\n            body\n            isInternal\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostActivitiesByAuthor($authorId: UUID!, $first: Int, $after: String) {\n    postActivitiesByAuthor(authorId: $authorId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          postId\n          commentId\n          comment {\n            id\n            body\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getPostActivitiesByAuthor($authorId: UUID!, $first: Int, $after: String) {\n    postActivitiesByAuthor(authorId: $authorId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          type\n          postId\n          commentId\n          comment {\n            id\n            body\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPost($id: UUID!) {\n    post(id: $id) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getPost($id: UUID!) {\n    post(id: $id) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostBySlug($slug: String!, $slugId: String!) {\n    postBySlug(slug: $slug, slugId: $slugId) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getPostBySlug($slug: String!, $slugId: String!) {\n    postBySlug(slug: $slug, slugId: $slugId) {\n      id\n      title\n      slug\n      slugId\n      contentMarkdown\n      board {\n        id\n        name\n      }\n      roadmap {\n        id\n        name\n      }\n      votes {\n        id\n        userId\n      }\n      activities {\n        id\n        type\n        authorId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPosts($first: Int, $after: String) {\n    posts(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getPosts($first: Int, $after: String) {\n    posts(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostsByBoard($boardId: UUID!, $first: Int, $after: String) {\n    postsByBoard(boardId: $boardId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getPostsByBoard($boardId: UUID!, $first: Int, $after: String) {\n    postsByBoard(boardId: $boardId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostsByRoadmap($roadmapId: UUID!, $first: Int, $after: String) {\n    postsByRoadmap(roadmapId: $roadmapId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getPostsByRoadmap($roadmapId: UUID!, $first: Int, $after: String) {\n    postsByRoadmap(roadmapId: $roadmapId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPostsByUser($userId: UUID!, $first: Int, $after: String) {\n    postsByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getPostsByUser($userId: UUID!, $first: Int, $after: String) {\n    postsByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          slug\n          slugId\n          votes {\n            id\n          }\n          board {\n            id\n            name\n          }\n          roadmap {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRoadmapCollection($id: UUID!) {\n    roadmapCollection(id: $id) {\n      id\n      name\n      description\n      index\n      isPublic\n      roadmaps {\n        id\n        name\n        url\n        color\n        index\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRoadmapCollection($id: UUID!) {\n    roadmapCollection(id: $id) {\n      id\n      name\n      description\n      index\n      isPublic\n      roadmaps {\n        id\n        name\n        url\n        color\n        index\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRoadmapCollections($first: Int, $after: String) {\n    roadmapCollections(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          index\n          isPublic\n          roadmaps {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getRoadmapCollections($first: Int, $after: String) {\n    roadmapCollections(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          index\n          isPublic\n          roadmaps {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRoadmap($id: UUID!) {\n    roadmap(id: $id) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRoadmap($id: UUID!) {\n    roadmap(id: $id) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRoadmapByUrl($url: String!) {\n    roadmapByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRoadmapByUrl($url: String!) {\n    roadmapByUrl(url: $url) {\n      id\n      name\n      url\n      color\n      index\n      display\n      roadmapCollectionId\n      posts {\n        id\n        title\n        slug\n        slugId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRoadmaps($first: Int, $after: String, $displayOnly: Boolean) {\n    roadmaps(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n          roadmapCollectionId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getRoadmaps($first: Int, $after: String, $displayOnly: Boolean) {\n    roadmaps(first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n          roadmapCollectionId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getRoadmapsByCollection($collectionId: UUID!, $first: Int, $after: String, $displayOnly: Boolean) {\n    roadmapsByCollection(collectionId: $collectionId, first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getRoadmapsByCollection($collectionId: UUID!, $first: Int, $after: String, $displayOnly: Boolean) {\n    roadmapsByCollection(collectionId: $collectionId, first: $first, after: $after, displayOnly: $displayOnly) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          url\n          color\n          index\n          display\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getSiteSettings {\n\tsiteSettings {\n\t\tid\n\t\ttitle\n\t\tdescription\n\t\tlogo\n\t\ticon\n\t\taccentColor\n\t\tgoogleAnalyticsId\n\t\tisPoweredBy\n\t\tallowSignup\n\t\tdeveloperMode\n\t\tlabs\n\t\ttheme\n\t}\n  }\n"): (typeof documents)["\n  query getSiteSettings {\n\tsiteSettings {\n\t\tid\n\t\ttitle\n\t\tdescription\n\t\tlogo\n\t\ticon\n\t\taccentColor\n\t\tgoogleAnalyticsId\n\t\tisPoweredBy\n\t\tallowSignup\n\t\tdeveloperMode\n\t\tlabs\n\t\ttheme\n\t}\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getVote($id: UUID!) {\n    vote(id: $id) {\n      id\n      postId\n      userId\n    }\n  }\n"): (typeof documents)["\n  query getVote($id: UUID!) {\n    vote(id: $id) {\n      id\n      postId\n      userId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getVotes($first: Int, $after: String) {\n    votes(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getVotes($first: Int, $after: String) {\n    votes(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getVotesByPost($postId: UUID!, $first: Int, $after: String) {\n    votesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getVotesByPost($postId: UUID!, $first: Int, $after: String) {\n    votesByPost(postId: $postId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          userId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getVotesByUser($userId: UUID!, $first: Int, $after: String) {\n    votesByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getVotesByUser($userId: UUID!, $first: Int, $after: String) {\n    votesByUser(userId: $userId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          postId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;